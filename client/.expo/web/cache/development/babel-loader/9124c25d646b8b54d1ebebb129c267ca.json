{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/paigeschulz1/Desktop/MUCFinal/MeetUCan/client/node_modules/react-native-material-buttons/src/components/text-button/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"../button\";\nimport { styles } from \"./styles\";\n\nvar TextButton = function (_PureComponent) {\n  _inherits(TextButton, _PureComponent);\n\n  var _super = _createSuper(TextButton);\n\n  function TextButton() {\n    _classCallCheck(this, TextButton);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TextButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          title = _this$props.title,\n          titleColor = _this$props.titleColor,\n          titleStyle = _this$props.titleStyle,\n          disabledTitleColor = _this$props.disabledTitleColor,\n          style = _this$props.style,\n          props = _objectWithoutProperties(_this$props, [\"title\", \"titleColor\", \"titleStyle\", \"disabledTitleColor\", \"style\"]);\n\n      var titleStyleOverrides = {\n        color: props.disabled ? disabledTitleColor : titleColor\n      };\n      return React.createElement(Button, _extends({\n        style: [styles.container, style],\n        shadeColor: titleColor,\n        rippleColor: titleColor\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 7\n        }\n      }), React.createElement(Text, {\n        style: [styles.title, titleStyle, titleStyleOverrides],\n        numberOfLines: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }\n      }, String(title).toUpperCase()));\n    }\n  }]);\n\n  return TextButton;\n}(PureComponent);\n\nTextButton.defaultProps = {\n  color: 'transparent',\n  disabledColor: 'transparent',\n  titleColor: 'rgb(0, 0, 0)',\n  disabledTitleColor: 'rgba(0, 0, 0, .26)',\n  shadeOpacity: 0.20\n};\nTextButton.propTypes = _objectSpread(_objectSpread({}, Button.propTypes), {}, {\n  title: PropTypes.string.isRequired,\n  titleColor: PropTypes.string,\n  titleStyle: Text.propTypes.style,\n  disabledTitleColor: PropTypes.string\n});\nexport { TextButton as default };","map":{"version":3,"sources":["/Users/paigeschulz1/Desktop/MUCFinal/MeetUCan/client/node_modules/react-native-material-buttons/src/components/text-button/index.js"],"names":["PropTypes","React","PureComponent","Button","styles","TextButton","props","title","titleColor","titleStyle","disabledTitleColor","style","titleStyleOverrides","color","disabled","container","String","toUpperCase","defaultProps","disabledColor","shadeOpacity","propTypes","string","isRequired","Text"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;;AAGA,OAAOC,MAAP;AACA,SAASC,MAAT;;IAEqBC,U;;;;;;;;;;;;;6BAoBV;AAAA,wBAQH,KAAKC,KARF;AAAA,UAELC,KAFK,eAELA,KAFK;AAAA,UAGLC,UAHK,eAGLA,UAHK;AAAA,UAILC,UAJK,eAILA,UAJK;AAAA,UAKLC,kBALK,eAKLA,kBALK;AAAA,UAMLC,KANK,eAMLA,KANK;AAAA,UAOFL,KAPE;;AAUP,UAAIM,mBAAmB,GAAG;AACxBC,QAAAA,KAAK,EAAEP,KAAK,CAACQ,QAAN,GACLJ,kBADK,GAELF;AAHsB,OAA1B;AAMA,aACE,oBAAC,MAAD;AACE,QAAA,KAAK,EAAE,CAACJ,MAAM,CAACW,SAAR,EAAmBJ,KAAnB,CADT;AAEE,QAAA,UAAU,EAAEH,UAFd;AAGE,QAAA,WAAW,EAAEA;AAHf,SAIMF,KAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAME,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE,CAACF,MAAM,CAACG,KAAR,EAAeE,UAAf,EAA2BG,mBAA3B,CADT;AAEE,QAAA,aAAa,EAAE,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIGI,MAAM,CAACT,KAAD,CAAN,CAAcU,WAAd,EAJH,CANF,CADF;AAeD;;;;EAnDqCf,a;;AAAnBG,U,CACZa,Y,GAAe;AACpBL,EAAAA,KAAK,EAAE,aADa;AAEpBM,EAAAA,aAAa,EAAE,aAFK;AAIpBX,EAAAA,UAAU,EAAE,cAJQ;AAKpBE,EAAAA,kBAAkB,EAAE,oBALA;AAOpBU,EAAAA,YAAY,EAAE;AAPM,C;AADHf,U,CAWZgB,S,mCACFlB,MAAM,CAACkB,S;AAEVd,EAAAA,KAAK,EAAEP,SAAS,CAACsB,MAAV,CAAiBC,U;AACxBf,EAAAA,UAAU,EAAER,SAAS,CAACsB,M;AACtBb,EAAAA,UAAU,EAAEe,IAAI,CAACH,SAAL,CAAeV,K;AAC3BD,EAAAA,kBAAkB,EAAEV,SAAS,CAACsB;;SAjBbjB,U","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport { Text } from 'react-native';\n\nimport Button from '../button';\nimport { styles } from './styles';\n\nexport default class TextButton extends PureComponent {\n  static defaultProps = {\n    color: 'transparent',\n    disabledColor: 'transparent',\n\n    titleColor: 'rgb(0, 0, 0)',\n    disabledTitleColor: 'rgba(0, 0, 0, .26)',\n\n    shadeOpacity: 0.20,\n  };\n\n  static propTypes = {\n    ...Button.propTypes,\n\n    title: PropTypes.string.isRequired,\n    titleColor: PropTypes.string,\n    titleStyle: Text.propTypes.style,\n    disabledTitleColor: PropTypes.string,\n  };\n\n  render() {\n    let {\n      title,\n      titleColor,\n      titleStyle,\n      disabledTitleColor,\n      style,\n      ...props\n    } = this.props;\n\n    let titleStyleOverrides = {\n      color: props.disabled?\n        disabledTitleColor:\n        titleColor,\n    };\n\n    return (\n      <Button\n        style={[styles.container, style]}\n        shadeColor={titleColor}\n        rippleColor={titleColor}\n        {...props}\n      >\n        <Text\n          style={[styles.title, titleStyle, titleStyleOverrides]}\n          numberOfLines={1}\n        >\n          {String(title).toUpperCase()}\n        </Text>\n      </Button>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}